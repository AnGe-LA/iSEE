% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R
\docType{methods}
\name{output-generics}
\alias{output-generics}
\alias{.renderOutput}
\alias{.defineOutput}
\alias{.generateOutput}
\title{Generics for Panel outputs}
\description{
An overview of the generics for defining the panel outputs, along with recommendations on their implementation.
}
\section{Defining the output element}{

In \code{.defineOutput(x, ...)}, the following arguments are required:
\itemize{
\item \code{x}, an instance of a Panel subclass.
\item \code{...}, further arguments that are not currently used.
}

Methods for this generic are expected to return an output element for inclusion into the \pkg{iSEE} interface, such as the output of \code{\link{plotOutput}}.
Multiple elements can be provided via a \code{\link{tagList}}.

The IDs of the output elements are expected to be prefixed with the panel name from \code{\link{.getEncodedName}(x)} and an underscore, e.g., \code{"RedDimPlot1_someOutput"}.
One of the output elements may simply have the ID set to \code{PANEL} alone;
this is usually the case for simple panels with one primary output like a \linkS4class{DotPlot}.
}

\section{Defining the rendered output}{

In \code{.renderOutput(x, se, ..., output, pObjects, rObjects)}, the following arguments are required:
\itemize{
\item \code{x}, an instance of a \linkS4class{Panel} class.
\item \code{se}, a \linkS4class{SummarizedExperiment} object containing the current dataset.
\item \code{...}, further arguments that may be used by specific methods.
\item \code{output}, the Shiny output object from the server function.
\item \code{pObjects}, an environment containing global parameters generated in the \code{\link{iSEE}} app.
\item \code{rObjects}, a reactive list of values generated in the \code{\link{iSEE}} app.
}

It is expected to attach a reactive expression to \code{output} to render the output elements created by \code{.defineOutput}.
The return value of this generic is not used; only the side-effect of the output set-up is relevant.

Within the rendering expression for each output, developers should call \code{\link{.respondPanelOutput}(panel_name, rObjects)} where \code{panel_name} is the output of \code{\link{.getEncodedName}(x)}.
This ensures that the output is rerendered upon changes to the appropriate reactive variable, which is itself modified by \code{\link{.renderOutput}} and related functions in \code{\link{.createObservers}}.
}

\section{Additional rendering obligations}{

The rendering expression defined in \code{\link{.renderOutput}} is also expected to:
\itemize{
\item Fill \code{pObjects$contents[[PANEL]]} with some content related to the displayed output that allows cross-referencing with single/multiple selection structures.
This will be used in other generics like \code{\link{.multiSelectionCommands}} and \code{\link{.singleSelectionValue}} to determine the identity of the selected point(s).
As a result, it is only strictly necessary if the panel is a potential transmitter, as determined by the return value of \code{\link{.multiSelectionDimension}}.
\item Fill \code{pObjects$commands[[PANEL]]} with a character vector of commands required to produce the displayed output.
This should minimally include the commands required to generate \code{pObjects$contents[[PANEL]]};
for plotting panels, the vector should also include code to create the plot.
\item Fill \code{pObjects$varname[[PANEL]]} with a string containing the R expression in \code{pObjects$commands[[PANEL]]} that holds the contents stored in \code{pObjects$contents[[PANEL]]}.
This is used for code reporting, and again, is only strictly necessary if the panel is a potential transmitter.
}
}

\section{Generating content}{

In \code{.generateOutput(x, se, ..., output, pObjects, rObjects)}, the following arguments are required:
\itemize{
\item \code{x}, an instance of a \linkS4class{Panel} class.
\item \code{se}, a \linkS4class{SummarizedExperiment} object containing the current dataset.
\item \code{...}, further arguments that may be used by specific methods.
\item \code{all_memory}, a named list containing \linkS4class{Panel} objects with their parameters for the current state of the app.
\item \code{all_contents}, a named list containing the contents of each panel.
}

Methods for this generic should return a list containing \code{contents}, some arbitrary content for the panel.
This is used during app initialization to ensure that \code{pObjects$contents} of transmitter panels is filled before rendering their children.

The output list may contain any number of other fields that will be ignored.
We suggest implementing this method to also return \code{commands} so that it can be used in \code{.renderOutput},
thus avoiding the need to write redundant code for both methods.

Developers should consider using the \code{\link{.processMultiSelections}} function for easily processing the multiple selection parameters.
}

\author{
Aaron Lun
}
