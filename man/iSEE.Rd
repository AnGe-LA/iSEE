% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/iSEE.R
\name{iSEE}
\alias{iSEE}
\title{iSEE: interactive SingleCell/Summarized Experiment Explorer}
\usage{
iSEE(se, redDimArgs = NULL, colDataArgs = NULL, geneExprArgs = NULL,
  geneStatArgs = NULL, redDimMax = 5, colDataMax = 5, geneExprMax = 5,
  geneStatMax = 5, initialPanels = NULL, annot.orgdb = NULL,
  annot.keytype = "ENTREZID", annot.keyfield = NULL,
  colormap = ExperimentColorMap(), run_local = TRUE)
}
\arguments{
\item{se}{An object that coercible to \linkS4class{SingleCellExperiment}.}

\item{redDimArgs}{A DataFrame similar to that produced by
\code{\link{redDimPlotDefaults}}, specifying initial parameters for the plots.}

\item{colDataArgs}{A DataFrame similar to that produced by
\code{\link{colDataPlotDefaults}}, specifying initial parameters for the plots.}

\item{geneExprArgs}{A DataFrame similar to that produced by
\code{\link{geneExprPlotDefaults}}, specifying initial parameters for the plots.}

\item{geneStatArgs}{A DataFrame similar to that produced by
\code{\link{geneStatTableDefaults}}, specifying initial parameters for the plots.}

\item{redDimMax}{An integer scalar specifying the maximum number of reduced
dimension plots in the interface.}

\item{colDataMax}{An integer scalar specifying the maximum number of column
data plots in the interface.}

\item{geneExprMax}{An integer scalar specifying the maximum number of gene
expression plots in the interface.}

\item{geneStatMax}{An integer scalar specifying the maximum number of gene
statistic tables in the interface.}

\item{initialPanels}{A DataFrame specifying which panels should be created
at initialization. This should contain a \code{Name} character field and a
\code{Width} integer field, see Details.}

\item{annot.orgdb}{An \code{org.*.db} annotation object from which
Entrez identifiers can be retrieved.}

\item{annot.keytype}{A string specifying the keytype to use to query
\code{annot.orgdb}.}

\item{annot.keyfield}{A string specifying the field of \code{rowData(se)}
containing the keys of type \code{annot.keytype}. If \code{NULL}, the
row names of \code{se} are used as the keys.}

\item{colormap}{An \linkS4class{ExperimentColorMap} object that defines
custom color maps to apply to individual \code{assays}, \code{colData},
and \code{rowData} covariates.}

\item{run_local}{A logical indicating whether the app is to be run
locally or remotely on a server, which determines how documentation 
will be accessed.}
}
\value{
A Shiny App is launched for interactive data exploration of the
\code{\link{SingleCellExperiment}} / \code{\link{SummarizedExperiment}}
object
}
\description{
Interactive visualization of single-cell data using a Shiny interface.
}
\details{
Users can pass default parameters via DataFrame objects in
\code{redDimArgs} and \code{geneExprArgs}. Each object can contain
some or all of the expected fields (see \code{\link{redDimPlotDefaults}}).
Any missing fields will be filled in with the defaults.

The number of maximum plots for each type of plot is set to the larger
of \code{*Max} and \code{nrow(*Args)}. Users can specify any number of
maximum plots, though increasing the number will increase the time
required to render the interface.

The \code{initialPanels} argument specifies the panels to be created
upon initializing the interface. This should be a DataFrame containing
a \code{Name} field specifying the identity of the panel, e.g.,
\code{"Reduced dimension plot 1"}, \code{"Gene statistics table 2"}.
The trailing number should not be greater than the number of
maximum plots of that type. The \code{Width} field may also be specified
describing the width of the panel from 2 to 12 (values will be coerced
inside this range).

If \code{annot.orgdb} is specified, gene information will be retrieved
upon selection of particular genes in the data table. No retrieval is
performed if \code{annot.orgdb=NULL}.
}
\examples{
library(scRNAseq)
data(allen)
class(allen)

# Example data ----

library(scater)
sce <- as(allen, "SingleCellExperiment")
counts(sce) <- assay(sce, "tophat_counts")
sce <- normalize(sce)
sce <- runPCA(sce)
sce <- runTSNE(sce)
sce

# Example color maps ----

count_colors <- function(n){
  c("black","brown","red","orange","yellow")
}
fpkm_colors <- viridis::inferno
tpm_colors <- viridis::plasma

qc_color_fun <- function(n){
  x <- c("forestgreen", "firebrick1")
  names(x) <- c("Y", "N")
  return(x)
}

driver_color_fun <- function(n){
  x <- RColorBrewer::brewer.pal(3, "Set2")
  names(x) <- unique(sce$driver_1_s)
  return(x)
}

ecm <- new("ExperimentColorMap",
    assays = list(
        counts = count_colors,
        tophat_counts = count_colors,
        cufflinks_fpkm = fpkm_colors,
        cufflinks_fpkm = fpkm_colors,
        rsem_tpm = tpm_colors
    ),
    colData = list(
        passes_qc_checks_s = qc_color_fun,
        driver_1_s = driver_color_fun
    )
)

# launch the app itself ----
app <- iSEE(sce, colormap = ecm)
if (interactive()) {
  shiny::runApp(app, port = 1234)
}
}
